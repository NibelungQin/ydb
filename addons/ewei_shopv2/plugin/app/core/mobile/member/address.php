<?phpuse Ydb\Entity\Manual\MemberAddress;use Ydb\Service\MemberAddressService;if (!defined('IN_IA')) {    exit('Access Denied');}require EWEI_SHOPV2_PLUGIN . 'app/core/page_mobile.php';class Address_EweiShopV2Page extends AppMobilePage{    public function get_list()    {        global $_W;        global $_GPC;        global $container;        if (empty($_GPC['openid'])) {            app_error(AppError::$ParamsError);            return;        }        $page = empty($_GPC['page']) ? 1 : (int)$_GPC['page'];        /**         * @var MemberAddressService $service         */        $service = $container->get(MemberAddressService::class);        $result = $service->getAddressList($_W['uniacid'], $_W['openid'], $page, 20);        app_json($result);    }    public function get_detail()    {        global $_W;        global $_GPC;        global $container;        if (empty($_GPC['id'])) {            app_error(AppError::$ParamsError);            return;        }        $id = (int)$_GPC['id'];        $data = array();        /**         * @var MemberAddressService $service         */        $service = $container->get(MemberAddressService::class);        $address = $service->getAddressDetail($_W['uniacid'], $_W['openid'], $id);        if (!empty($address)) {            $address['areas'] = $address['province'] . ' ' . $address['city'] . ' ' . $address['area'];            $data['detail'] = $address;        }        $set = m('util')->get_area_config_set();        $data['openstreet'] = !empty($set['address_street']) ? true : false;        app_json($data);    }    public function set_default()    {        global $_W;        global $_GPC;        global $container;        if (empty($_GPC['id'])) {            app_error(AppError::$ParamsError);            return;        }        $id = (int)$_GPC['id'];        /**         * @var MemberAddressService $service         */        $service = $container->get(MemberAddressService::class);        $data = $service->getAddressDetail($_W['uniacid'], $_W['openid'], $id);        if (empty($data)) {            app_error(AppError::$AddressNotFound);            return;        }        if ((int)$data['deleted'] === 1) {            app_error(AppError::$ParamsError);            return;        }        $service->setDefaultAddress($_W['uniacid'], $_W['openid'], $id);        app_json();    }    public function submit()    {        global $_W;        global $_GPC;        global $container;        /**         * @var MemberAddressService $service         */        $service = $container->get(MemberAddressService::class);        $id = (int)$_GPC['id'];        $data = [            'address' => trim($_GPC['address']),            'realname' => trim($_GPC['realname']),            'mobile' => trim($_GPC['mobile']),            'province' => trim($_GPC['province']),            'city' => trim($_GPC['city']),            'area' => trim($_GPC['area']),            'street' => trim($_GPC['street']),            'openid' => $_W['openid'],            'uniacid' => $_W['uniacid'],            'datavalue' => trim($_GPC['datavalue']),            'streetdatavalue' => trim($_GPC['streetdatavalue'])        ];        if (!$this->validateAddressField($data)) {            return;        }        if (empty($id)) {            $addresscount = $service->getAddressCount($_W['uniacid'], $_W['openid']);            if ($addresscount <= 0) {                $data['isdefault'] = 1;            }            $id = $service->addAddress($data);        } else {            $data['lng'] = '';            $data['lat'] = '';            $service->updateAddress($data, ['id' => $id, 'uniacid' => $_W['uniacid'], 'openid' => $_W['openid']]);        }        app_json(array('addressid' => $id));    }    private function validateAddressField($data)    {        if (empty($data['address'])) {            app_error(AppError::$ParamsError, '详细地址为空');            return false;        }        if (empty($data['realname'])) {            app_error(AppError::$ParamsError, '收件人姓名为空');            return false;        }        if (empty($data['mobile'])) {            app_error(AppError::$ParamsError, '收件人手机为空');            return false;        }        if (empty($data['province'])) {            app_error(AppError::$ParamsError, '收件省份为空');            return false;        }        if (empty($data['city'])) {            app_error(AppError::$ParamsError, '收件城市为空');            return false;        }        if (empty($data['area'])) {            app_error(AppError::$ParamsError, '收件区域为空');            return false;        }        $set = m('util')->get_area_config_set();        if (!empty($set['address_street']) && empty($data['datavalue'])) {            app_error(AppError::$ParamsError, '地址数据出错，请重新选择');            return false;        }        return true;    }    public function delete()    {        global $_W;        global $_GPC;        global $container;        /**         * @var MemberAddressService $service         */        $service = $container->get(MemberAddressService::class);        $id = (int)$_GPC['id'];        $data = $service->getAddressDetail($_W['uniacid'], $_W['openid'], $id);        if (empty($data)) {            app_error(AppError::$AddressNotFound);            return;        }        $service->deleteAddress($id);        if ((int)$data['isdefault'] === 1) {  // 删除了默认地址，需要在设置一个默认地址            $addressList = $service->getAddressList($_W['uniacid'], $_W['openid']);            if ((int)$addressList['total'] > 0) {                $service->setDefaultAddress($_W['uniacid'], $_W['openid'], $addressList['list'][0]['id']);                app_json(['defaultid' => $addressList['list'][0]['id']]);                return;            }        }        app_json();    }    public function selector()    {        global $_W;        global $_GPC;        $condition = ' and openid=:openid and deleted=0 and  `uniacid` = :uniacid  ';        $params = array(':uniacid' => $_W['uniacid'], ':openid' => $_W['openid']);        $sql = 'SELECT id,realname,mobile,address,province,city,area,isdefault FROM ' . MemberAddress::TABLE_NAME            . ' where 1 ' . $condition . ' ORDER BY isdefault desc, id DESC ';        $list = pdo_fetchall($sql, $params);        app_json(array('list' => $list));    }}